{"version":3,"sources":["index.js"],"names":["Cell","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","onClick","text","ReactDOM","render","_useState","useState","_useState2","Object","_Users_liuzhaofeng_codes_tic_tac_toe_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","n","setN","_useState3","_useState4","finished","setFinished","_useState5","_useState6","winner","setWinner","_useState7","_useState8","cells","setCells","onClickCell","row","col","console","log","copy","JSON","parse","stringify","i","tell","map","item","key","document","getElementById"],"mappings":"iMAIMA,SAAO,SAASC,GAIpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAASL,EAAMK,SAClCL,EAAMM,QAkFbC,IAASC,OACPP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cA/Ee,WAAW,IAAAM,EACVC,mBAAS,GADCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrBK,EADqBH,EAAA,GAClBI,EADkBJ,EAAA,GAAAK,EAEIN,oBAAS,GAFbO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAErBE,EAFqBD,EAAA,GAEXE,EAFWF,EAAA,GAAAG,EAGAV,mBAAS,IAHTW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGrBE,EAHqBD,EAAA,GAGbE,EAHaF,EAAA,GAAAG,EAIFd,mBAAS,CACjC,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,QAPae,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAIrBE,EAJqBD,EAAA,GAIdE,EAJcF,EAAA,GAiDtBG,EAAc,SAACC,EAAKC,GACxBC,QAAQC,IAAI,MAAOH,GACnBE,QAAQC,IAAI,MAAOF,GACnBf,EAAKD,EAAI,GACT,IAAMmB,EAAOC,KAAKC,MAAMD,KAAKE,UAAUV,IACvCO,EAAKJ,GAAKC,GAAOhB,EAAI,IAAM,EAAI,IAAM,IACrCa,EAASM,GA9CE,SAAAP,GACX,IAAK,IAAIW,EAAI,EAAGA,EAAI,EAAGA,IACrB,GACEX,EAAMW,GAAG,KAAOX,EAAMW,GAAG,IACzBX,EAAMW,GAAG,KAAOX,EAAMW,GAAG,IACT,OAAhBX,EAAMW,GAAG,GACT,CACAlB,GAAY,GACZI,EAAUG,EAAMW,GAAG,IACnB,MAGJ,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IACrB,GACEX,EAAM,GAAGW,KAAOX,EAAM,GAAGW,IACzBX,EAAM,GAAGW,KAAOX,EAAM,GAAGW,IACT,OAAhBX,EAAM,GAAGW,GACT,CACAlB,GAAY,GACZI,EAAUG,EAAM,GAAGW,IACnB,MAIFX,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACT,OAAhBA,EAAM,GAAG,KAETP,GAAY,GACZI,EAAUG,EAAM,GAAG,KAGnBA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACT,OAAhBA,EAAM,GAAG,KAETP,GAAY,GACZI,EAAUG,EAAM,GAAG,KAUrBY,CAAKL,IAEP,OACEhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gBAAQW,GACPY,EAAMa,IAAI,SAACC,EAAMX,GAAP,OACT5B,EAAAC,EAAAC,cAAA,OAAKsC,IAAKZ,EAAKzB,UAAU,OACtBoC,EAAKD,IAAI,SAACC,EAAMV,GAAP,OACR7B,EAAAC,EAAAC,cAAA,OAAKsC,IAAKX,EAAK1B,UAAU,OACvBH,EAAAC,EAAAC,cAACJ,EAAD,CAAMO,KAAMkC,EAAMnC,QAAS,kBAAMuB,EAAYC,EAAKC,YAKzDZ,GAAYjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAC1BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,4BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,mBAAoCkB,EAApC,aAOJ,OAEFoB,SAASC,eAAe","file":"static/js/main.f50155ff.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style.css\";\n\nconst Cell = function(props) {\n  // const [text, setText] = useState(\"\");\n\n  // const onClickCell = () => {};\n  return (\n    <div className=\"cell\" onClick={props.onClick}>\n      {props.text}\n    </div>\n  );\n};\n\nconst Chessborad = function() {\n  const [n, setN] = useState(0);\n  const [finished, setFinished] = useState(false);\n  const [winner, setWinner] = useState('');\n  const [cells, setCells] = useState([\n    [null, null, null],\n    [null, null, null],\n    [null, null, null]\n  ]);\n  const tell = cells => {\n    for (let i = 0; i < 3; i++) {\n      if (\n        cells[i][0] === cells[i][1] &&\n        cells[i][1] === cells[i][2] &&\n        cells[i][0] !== null\n      ) {\n        setFinished(true);\n        setWinner(cells[i][0]);\n        break;\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      if (\n        cells[0][i] === cells[1][i] &&\n        cells[1][i] === cells[2][i] &&\n        cells[0][i] !== null\n      ) {\n        setFinished(true);\n        setWinner(cells[0][i]);\n        break;\n      }\n    }\n    if (\n      cells[0][0] === cells[1][1] &&\n      cells[1][1] === cells[2][2] &&\n      cells[0][0] !== null\n    ) {\n      setFinished(true);\n      setWinner(cells[0][0]);\n    }\n    if (\n      cells[2][0] === cells[1][1] &&\n      cells[1][1] === cells[2][0] &&\n      cells[2][0] !== null\n    ) {\n      setFinished(true);\n      setWinner(cells[2][0]);\n    }\n  };\n  const onClickCell = (row, col) => {\n    console.log(\"row\", row);\n    console.log(\"col\", col);\n    setN(n + 1);\n    const copy = JSON.parse(JSON.stringify(cells));\n    copy[row][col] = n % 2 === 0 ? \"x\" : \"o\";\n    setCells(copy);\n    tell(copy);\n  };\n  return (\n    <div>\n      <div>n:{n}</div>\n      {cells.map((item, row) => (\n        <div key={row} className=\"row\">\n          {item.map((item, col) => (\n            <div key={col} className=\"col\">\n              <Cell text={item} onClick={() => onClickCell(row, col)} />\n            </div>\n          ))}\n        </div>\n      ))}\n      {finished && <div className=\"gameOver\">\n        <div className=\"description\">游戏结束</div>\n        <div className=\"winner\">winner is 「{winner}」</div>\n      </div>}\n    </div>\n  );\n};\nReactDOM.render(\n  <div>\n    <Chessborad />\n  </div>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}